import os
import torch
from pydub import AudioSegment
from speechbrain.pretrained import SpeakerRecognition

from speechbrain.dataio.dataio import read_audio
import subprocess

# üîß –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–æ —Å–∏–º–ª–∏–Ω–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
os.environ["HF_HUB_DISABLE_SYMLINKS_WARNING"] = "1"

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ ffmpeg (–¥–ª—è pydub)
AudioSegment.converter = r"C:\\Users\\tokta\\Desktop\\ffmpeg-7.1.1-essentials_build\\bin\\ffmpeg.exe"

# ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ speaker verification
verifier = SpeakerRecognition.from_hparams(
    source="pretrained_models/spkrec-ecapa-voxceleb",
    savedir="pretrained_models/spkrec-ecapa-voxceleb",
    run_opts={"use_symlinks": False}
)

# üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
EMBEDDING_DIR = "voice_embeddings"
os.makedirs(EMBEDDING_DIR, exist_ok=True)

# === üì• –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –≥–æ–ª–æ—Å–∞ ===
def save_user_voice_embedding(audio_path, username):
    wav_path = convert_to_wav(audio_path)
    signal = read_audio(wav_path)
    embedding = verifier.encode_batch(signal.unsqueeze(0))  # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ –±–∞—Ç—á–∞
    torch.save(embedding, os.path.join(EMBEDDING_DIR, f"{username}.pt"))
    os.remove(wav_path)

# === üîê –ü—Ä–∏ –≤—Ö–æ–¥–µ: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≥–æ–ª–æ—Å —Å —ç—Ç–∞–ª–æ–Ω–æ–º ===
def verify_user_voice(audio_path, username):
    embedding_path = os.path.join(EMBEDDING_DIR, f"{username}.pt")
    if not os.path.exists(embedding_path):
        return False, "–ù–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–ø–µ—á–∞—Ç–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

    wav_path = convert_to_wav(audio_path)
    signal = read_audio(wav_path)
    test_embedding = verifier.encode_batch(signal.unsqueeze(0))
    ref_embedding = torch.load(embedding_path)

    similarity = torch.nn.functional.cosine_similarity(
    test_embedding.squeeze(1), ref_embedding.squeeze(1)
    )[0].item()

    os.remove(wav_path)

    print(f"[DEBUG] Similarity: {similarity:.4f}")
    return similarity > 0.5, f"Similarity: {similarity:.4f}"


# === üéß –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è webm ‚Üí wav 16kHz mono ===
def convert_to_wav(webm_path):
    wav_path = webm_path.replace(".webm", ".wav")
    try:
        print(f"[DEBUG] –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é: {webm_path}")
        result = subprocess.run(
            [
                r"C:\Users\tokta\Desktop\ffmpeg-7.1.1-essentials_build\bin\ffmpeg.exe",
                "-y",                     # overwrite output
                "-i", webm_path,
                "-ar", "16000",           # sample rate
                "-ac", "1",               # mono
                wav_path
            ],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )

        if result.returncode != 0:
            print(f"[ERROR] ffmpeg stderr:\n{result.stderr.decode()}")
            raise Exception("FFmpeg –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")

        print(f"[DEBUG] –£—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {wav_path}")
        return wav_path

    except Exception as e:
        print(f"[ERROR] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
        raise

